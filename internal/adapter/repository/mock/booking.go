// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/booking_verifier.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mgerasimchuk/space-trouble/internal/domain/model"
	reflect "reflect"
)

// MockBookingRepository is a mock of BookingRepository interface
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBookingRepository) Create(b *model.Booking) (*model.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", b)
	ret0, _ := ret[0].(*model.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBookingRepositoryMockRecorder) Create(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingRepository)(nil).Create), b)
}

// Save mocks base method
func (m *MockBookingRepository) Save(b *model.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBookingRepositoryMockRecorder) Save(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBookingRepository)(nil).Save), b)
}

// GetList mocks base method
func (m *MockBookingRepository) GetList(status *string, limit, offset *int) ([]*model.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", status, limit, offset)
	ret0, _ := ret[0].([]*model.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList
func (mr *MockBookingRepositoryMockRecorder) GetList(status, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockBookingRepository)(nil).GetList), status, limit, offset)
}

// Delete mocks base method
func (m *MockBookingRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBookingRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookingRepository)(nil).Delete), id)
}

// GetAndModify mocks base method
func (m *MockBookingRepository) GetAndModify(searchStatus, modifyStatus string) (*model.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndModify", searchStatus, modifyStatus)
	ret0, _ := ret[0].(*model.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndModify indicates an expected call of GetAndModify
func (mr *MockBookingRepositoryMockRecorder) GetAndModify(searchStatus, modifyStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndModify", reflect.TypeOf((*MockBookingRepository)(nil).GetAndModify), searchStatus, modifyStatus)
}
